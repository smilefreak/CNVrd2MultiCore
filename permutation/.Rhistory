if(0 + 1* sd(ranges_per_region[,j]) <= ranges_per_region[i,j]){
counts[i] = counts[i] + 1
}
}
}
for ( i in nrow(ranges_per_region)){
print(i)
counts[i] = 0
for( j in 1:ncol(ranges_per_region)){
#print(ranges_per_region[1000,j])
if(0 + 1* sd(ranges_per_region[,j]) <= ranges_per_region[i,j]){
counts[i] = counts[i] + 1
}
}
}
for ( i in 1:nrow(ranges_per_region)){
print(i)
counts[i] = 0
for( j in 1:ncol(ranges_per_region)){
#print(ranges_per_region[1000,j])
if(0 + 1* sd(ranges_per_region[,j]) <= ranges_per_region[i,j]){
counts[i] = counts[i] + 1
}
}
}
hist(counts)
counts
plot(counts)
plot(counts,ces=0.5)
plot(counts,cex=0.5)
plot( )counts = c()counts,cex=0.5)
for( i in 1:length(counts)){
if( counts[i] > 90){
new_counts[i] = 1
}
}
new_counts = c()
new_counts = c()
for( i in 1:length(counts)){
if( counts[i] > 90){
new_counts[i] = 1
}
}
plot(new_counts)
new_counts = c()
for( i in 1:length(counts)){
if( counts[i] > 95){
print(i)
new_counts[i] = 1
}
}
real_polyMorphic$putativeBoundary
new_counts = c()
count_indices = c()
index = 1
for( i in 1:length(counts)){
if( counts[i] > 95){
count_indices[index] = i
index = index + 1
print(i)
new_counts[i] = 1
}
}
count_indices
count_indices[88:92]
count_indices[88:93]
count_indices[88:94]
count_indices[88:93]
x = identifyPolymorphicRegion(Object = results[[1]],segmentObject=segment_scores[[1]],xlim=limits)
plot()
plot(new_counts)
x = identifyPolymorphicRegion(Object = results[[1]],segmentObject=segment_scores[[1]],xlim=limits)
y = identifyPolymorphicRegion(Object = results[[1]],segmentObject=new_samples[[2]],xlim=l)
class(polyMorphicResampling[[1]])
class(polyMorphicResampling[[1]][[1]])
class(polyMorphicResampling[[1]]
polyMorphicResampling[[1]]
polyMorphicResampling[[1]]$x = plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=real_polyMorphic,xlim=limits)
y = plotPolymorphicRegion(Object = results[[1]],polyMorphicResamplingNew[[1]],xlim=limits)
real_polyMorphic[[1]]
real_polyMorphic$putativeBoundary
x = plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=real_polyMorphic,xlim=limits)
class(real_polyMorphic)
x = plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=real_polyMorphic,xlim=limits)
cRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)p
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
x$putativeBoundary
x$putativeBoundary[1:40]
unlist(x$putativeBoundary)
(x$putativeBoundary)
(x$putativeBoundary[1:4]
)
(x$putativeBoundary[20:30]
)
(x$putativeBoundary[20:30])
(x$putativeBoundary[30:40])
 )polymorphic_regions = function(new_counts){
start_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1 ){
if(set_start == T){
start_index[index] = (new_counts[i] * 1000) - 1000
set_start = F
}
}else{
end_index[index] = (new_counts[i] * 1000) 
index= index + 1
}
}
}
truncate_polymorphic_regions = function(new_counts){
start_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1 ){
if(set_start == T){
start_index[index] = (new_counts[i] * 1000) - 1000
set_start = F
}
}else{
end_index[index] = (new_counts[i] * 1000) 
index= index + 1
}
}
}
putative_regions = truncate_polymorphic_regions(new_counts)
putative_regions = truncate_polymorphic_regions(new_counts)
truncate_polymorphic_regions = function(new_counts){
start_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1){
if(set_start == T){
start_index[index] = (i * 1000) - 1000
set_start = F
}
}else{
end_index[index] = (i * 1000) 
index= index + 1
}
}
}
putative_regions = truncate_polymorphic_regions(new_counts)
new_counts[i]
for( i in 1:length(counts)){
if( counts[i] > 95){
count_indices[index] = i
index = index + 1
print(i)
new_counts[i] = 1
}else{
new_counts[i] = 0
}
}
truncate_polymorphic_regions = function(new_counts){
start_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1){
if(set_start == T){
start_index[index] = (i * 1000) - 1000
set_start = F
}
}else{
end_index[index] = (i * 1000) 
index= index + 1
}
}
}
putative_regions = truncate_polymorphic_regions(new_counts)
truncate_polymorphic_regions = function(new_counts){
start_index = c()
end_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1){
if(set_start == T){
start_index[index] = (i * 1000) - 1000
set_start = F
}
}else{
# going to be one longer than it needs to be if 
# what we are testing really doesn't match up
end_index[index] = (i * 1000) 
index= index + 1
}
}
return(cbind(start_index,end_index))
}
putative_regions = truncate_polymorphic_regions(new_counts)
truncate_polymorphic_regions = function(new_counts){
start_index = c()
end_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1){
if(set_start == T){
start_index[index] = (i * 1000) - 1000
set_start = F
}
}else{
# going to be one longer than it needs to be if 
# what we are testing really doesn't match up
end_index[index] = (i * 1000) 
set_start =T 
index= index + 1
}
}
return(cbind(start_index,end_index))
}
putative_regions = truncate_polymorphic_regions(new_counts)
putative_regions
truncate_polymorphic_regions = function(new_counts){
start_index = c()
end_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1){
if(set_start == T){
start_index[index] = (i * 1000) - 1000
set_start = F
}
}else{
# going to be one longer than it needs to be if 
# what we are testing really doesn't match up
if(set_start == F){
end_index[index] = (i * 1000) 
set_start =T 
}
index= index + 1
}
}
return(cbind(start_index,end_index))
}
putative_regions = truncate_polymorphic_regions(new_counts)
putative_regions
truncate_polymorphic_regions = function(new_counts){
start_index = c()
end_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1){
if(set_start == T){
start_index[index] = (i * 1000) - 1000
set_start = F
}
}else{
# going to be one longer than it needs to be if 
# what we are testing really doesn't match up
if(set_start == F){
end_index[index] = (i * 1000) 
set_start =T 
}
index= index + 1
}
}
return(cbind(start_index,end_index))
}
putative_regions
putative_regions = truncate_polymorphic_regions(new_counts)
putative_regions
truncate_polymorphic_regions = function(new_counts){
start_index = c()
end_index = c()
index = 1
set_start = T
for ( i in 1:length(new_counts)){
if(new_counts[i] == 1){
if(set_start == T){
start_index[index] = (i * 1000) - 1000
set_start = F
}
}else{
# going to be one longer than it needs to be if 
# what we are testing really doesn't match up
if(set_start == F){
end_index[index] = (i * 1000) 
set_start =T 
index= index + 1
}
}
}
return(cbind(start_index,end_index))
}
putative_regions = truncate_polymorphic_regions(new_counts)
putative_regions
start_index[1,]
putative_regions[1,]
putative_regions[,1
]
putative_regions = IRanges(putative_regions[,1],putative_regions[,2])
putative_regions
union(putative_regions,real_polyMorphic$putativeBoundary)
intersect(putative_regions,real_polyMorphic$putativeBoundary)
union(putative_regions,real_polyMorphic$putativeBoundary)
putative_regions
limits=c(4010000,4013000)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
putative_regions
limits=c(4043000,4049000)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
limits=c(4043000-5000,4049000+5000)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
limits=c(4043000-10000,4049000+10000)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
putative_regions = truncate_polymorphic_regions(new_counts)
limits=c(4043000-100000,4049000+100000)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
putative_regions
counts[3950:4000]
putative_regions
pdf('putative_regions.pdf')
for ( i in 1:nrow(putative_regions)){
limits=c(putative_regions[1,1] - 5000,putative_regions[1,2] + 5000)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
warnings()
warnings()bopdf('putative_regions.pdf')
for ( i in 1:nrow(putative_regions)){
limits=c(putative_regions[i,1] - 5000,putative_regions[i,2] + 5000)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
pdf('putative_regions.pdf')
for ( i in 1:nrow(putative_regions)){
limits=c(putative_regions[i,1] - 5000,putative_regions[i,2] + 5000)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
pdf('putative_regions.pdf')
for ( i in 1:nrow(putative_regions)){
limits=c(putative_regions[i,1] ,putative_regions[i,2] )
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
counts = c()
for ( i in 1:nrow(ranges_per_region)){
print(i)
counts[i] = 0
for( j in 1:ncol(ranges_per_region)){
#print(ranges_per_region[1000,j])
if(mean(ranges_per_region) + 1* sd(ranges_per_region[,j]) <= ranges_per_region[i,j]){
counts[i] = counts[i] + 1
}
}
counts = c()
for ( i in 1:nrow(ranges_per_region)){
print(i)
counts[i] = 0
for( j in 1:ncol(ranges_per_region)){
#print(ranges_per_region[1000,j])
if((mean(ranges_per_region) + 1* sd(ranges_per_region[,j])) <= ranges_per_region[i,j]){
counts[i] = counts[i] + 1
}
}
}
counts = c()
for ( i in 1:nrow(ranges_per_region)){
print(i)
counts[i] = 0
for( j in 1:ncol(ranges_per_region)){
#print(ranges_per_region[1000,j])
if((mean(ranges_per_region) + 1* sd(ranges_per_region[,j])) <= ranges_per_region[i,j]){
counts[i] = counts[i] + 1
}
}
}
counts = c()
for ( i in 1:nrow(ranges_per_region)){
print(i)
counts[i] = 0
for( j in 1:ncol(ranges_per_region)){
#print(ranges_per_region[1000,j])
if((mean(ranges_per_region) + 1* sd(ranges_per_region[,j])) <= ranges_per_region[i,j]){
counts[i] = counts[i] + 1
}
}
}
count2 = c()
for ( i in 1:nrow(ranges_per_region)){
print(i)
count2[i] = 0
for( j in 1:ncol(ranges_per_region)){
#print(ranges_per_region[1000,j])
if((mean(ranges_per_region) + 1.5* sd(ranges_per_region[,j])) <= ranges_per_region[i,j]){
count2[i] = counts[i] + 1
}
}
}
ls
?quantile
 get_quantiles = function(permutations,probs){
subRegions = permutations$subRegionMatrix
return( apply(subRegions,2,function(x) return(quantile(x,probs=probs)[2] - quantile(x,probs=probs)[1])))
}
q_permutationdata = lapply(polyMorphicResamplingNew,get_quantiles,probs=c(.05,.95))
q_realdata = get_quantiles(real_polyMorphic,probs=c(.05,.95)) 
p_values  = c()
for ( i in 1:nrow(q_ranges_per_region)){
pvalue[i] = sum(q_ranges_per_region[i,] < q_realdata[i])/length(q_realdata[i])
if(pvalue[i] > 95){
pvalue[i] = 1
}
else{
pvalue[i] = 0
}
}
wilcox.test
#range_quantile=lapply(q_permutationdata,function(x) return(mapply(rangeDifference,split(x,row(x)),split(q_realdata,col(q_realdata)))))
#range_quantile=lapply(q_permutationdata,function(x) return(mapply(rangeDifferenceQuantile,split(x,row(x)),split(min_and_max_real_data,col(min_and_max_real_data)))))
q_ranges_per_region = as.matrix(q_permutationdata)
q_ranges_per_region = apply(q_ranges_per_region,1,function(x) {return(x[[1]])})
dim(q_ranges_per_region)
(q_ranges_per_region[1,])
quantile(q_ranges_per_region[1,]),probs=.975))
quantile(q_ranges_per_region[1,]),probs=.975)
quantile(q_ranges_per_region[1,],probs=.975)
ninetyseven=apply(q_ranges_per_region,1,quantile(x,probs=.975))
ninetyseven=apply(q_ranges_per_region,1,quantile,probs=.975)
ninetyseven
ninetyseven=quantile(apply(q_ranges_per_region,1,quantile,probs=.975),probs=.975)
ninetyseven
ninetyseven=(apply(q_ranges_per_region,1,quantile,probs=.975),probs=.975)
ninetyseven=(apply(q_ranges_per_region,1,quantile,probs=.975)
)
ninetyseven
ninetyseven=(apply(q_ranges_per_region,1,quantile,probs=.975),probs=.975)
ninetyseven=(apply(q_ranges_per_region,1,quantile,probs=.975),probs=.975)
ninetyseven=(apply(q_ranges_per_region,1,quantile,probs=.975),probs=.975)
ninetyseven=(apply(q_ranges_per_region,1,quantile,probs=.975),probs=.975)
ninetyseven=quantile(apply(q_ranges_per_region,1,quantile,probs=.975),probs=.975)
putative_regions = truncate_polymorphic_regions(vapply(q_realdata,function(x) ifelse(x >= ninetyseven,1,0)))
putative_regions = truncate_polymorphic_regions(sapply(q_realdata,1,function(x) ifelse(x >= ninetyseven,1,0)))
putative_regions = truncate_polymorphic_regions(sapply(q_realdata,function(x) ifelse(x >= ninetyseven,1,0)))
putative_regions
putative_regions
putative_regions
pdf('putative_regions.pdf')
for ( i in 1:10){
limits=c(putative_regions[i,1] ,putative_regions[i,2] )
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
library(CNVrd2)
pdf('putative_regions.pdf')
for ( i in 1:10){
limits=c(putative_regions[i,1] ,putative_regions[i,2] )
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
pdf('putative_regions.pdf')
for ( i in 1:10){
limits=c(putative_regions[i,1] ,putative_regions[i,2] )
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
warnings()
detach("package:CNVrd2",unload=T)
library(CNVrd2)
pdf('putative_regions.pdf')
for ( i in 1:10){
limits=c(putative_regions[i,1] ,putative_regions[i,2] )
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
get_quantiles = function(permutations,probs){
subRegions = permutations$subRegionMatrix
return( apply(subRegions,2,function(x) return(max(abs(quantile(x,probs=probs)[2] - median(x)), abs(quantile(x,probs=probs)[1]-median(x))))))
}
m_permutationdata = lapply(polyMorphicResamplingNew,get_max_median,probs=c(.05,.95))
m_readata = get_max_median(real_polyMorphic,probs=c(.05,.95))
get_max_median = function(permutations,probs){
subRegions = permutations$subRegionMatrix
return( apply(subRegions,2,function(x) return(max(abs(quantile(x,probs=probs)[2] - median(x)), abs(quantile(x,probs=probs)[1]-median(x))))))
}
m_permutationdata = lapply(polyMorphicResamplingNew,get_max_median,probs=c(.05,.95))
m_readata = get_max_median(real_polyMorphic,probs=c(.05,.95))
pdf('putative_regions.pdf')
for ( i in 1:10){
limits=c(putative_regions[i,1] ,putative_regions[i,2] )
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=x,xlim=limits)
plotPolymorphicRegion(Object = results[[1]],polymorphicRegionObject=y,xlim=limits)
}
dev.off()
